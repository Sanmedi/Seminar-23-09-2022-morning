
# Инструкция по работе с Git

## Подготовка репозитория
Для создания репозитория используется команда *git init*. Чтобы созадать репозиторий напишите в терминале с открытой папкой для репозитория *git init*.

## Добавление файлов в репозиторий

Для добавления файла к коммиту используется комманда *git add*. Для этого в терминале с папкой-репозиторием необходимо написать *git add <название файла>*.

## Создание коммита
Для создания коммита используется команда *git commit*. Чтобы создать новый коммит в терминале с открытой папкой-репозиторием пишем команду *git commit -m "<сообщение к коммиту>"*. Сообщения к коммитам писать ***ОБЯЗАТЕЛЬНО***.

## Создание локальной копии главного репозитория 
   
   git clone https://github.com/oyasnev/test
    cd test  (не забыть перейти в каталог репозитория)

Все новые файлы: 
    
    git add .

## Сохранение изменений файлов


    git commit ­am "commit description" 

## Получение изменений из главного репозитория

    git pull

## Отправка изменений в главный репозиторий (с авторазрешением конфликтов): 

git pull (проверить на наличие новых изменений в репозитории и, если                  
они есть, выкачать их и объединить с локальными изменениями)
    git push  (отправить изменения в репозиторий)
    
    
  #  Основы работы с удаленным репозиторием
## git clone — создание копии (удаленного) репозитория
Для начала работы с центральным репозиторием следует его создание оригинального проекта со всей ответственностью.

Клонирует репозиторий, используя протокол http:

git clone http://user@somehost:port/~user/repository/project.git
Клонирует репозиторий с той же машины в директорию myrepo:

git clone /home/username/project myrepo
Клонирует репозиторий, используя безопасный протокол ssh:

git clone ssh://user@somehost:port/~user/repository
В git имеется и собственный протокол:

git clone git://user@somehost:port/~user/repository/project.git/
Импортирует репозиторий svn, используя протокол http:

git svn clone -s http://repo/location
где -s – понимают стандартные папки SVN (ствол, ветки, теги)

## git fetch и git pull — забираем изменения из центрального репозитория
Для наблюдения ветки с репозиторием используются команды git fetch и git pull.

git fetch — собирает изменения удаленной ветки из репозитория по умолчанию, основные ветки; игрушка, которая была использована при клонировании репозитория. Изменения обновляют удаленную ветку (ветвь удаленного отслеживания), после чего необходимо будет провести слияние с характеристикой ветку команды git merge.

Получает изменения из определенного репозитория:

git fetch /home/username/project
Возможно также использование синонимов для адресов, вызываемые командой git remote:

git remote add username-project /home/username/project
git fetch username-project
Естественно, что после оценки изменений, например, команда git diff, надо создать коммит слияния с основным:

git merge username-project/master
Команда git pull сразу забирает изменения и следует слияние с активной веткой. Забирает из репозитории, для которых были созданы удаленные ветки по умолчанию:

git pull
Забирает изменения и метки из определенного репозитория:

git pull username-project --tags
Как правило, используется сразу команда git pull.

## git push — переносим изменения в удаленный репозиторий
После проведения работы в экспериментальной ветке, слияния с основным, необходимо обновить удаленный репозиторий (удаленную ветку). Для этого используется команда git push.

Отправляет свои изменения в удаленную ветку, созданную при клонировании по умолчанию:

git push
Отправляет изменения из ветки мастера в ветку экспериментального удаленного репозитория:

git push ssh://yourserver.com/~you/proj.git master:experimental
В удаленном репозитории происхождение прохода ветку экспериментальное:

git push origin :experimental
Отправляет в удаленную ветку мастер-репозиторий origin (синоним репозиторий по умолчанию) ветки осмотра ветки master:

git push origin master:master
Отправляет метки в удаленную ветку основной репозиторий origin:

git push origin master --tags
Изменяет указатель для удаленной ветке основной репозиторий origin (master будет такой же как и develop):

git push origin origin/develop:master
Добавляет ветку test в удаленный репозиторий origin, указывающую на коммит ветки разработки:

git push origin origin/develop:refs/heads/test
